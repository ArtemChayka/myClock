{"version":3,"file":"index.js","sources":["../src/main.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nconst inputEL = document.querySelector('#datetime-picker')\nconst startBtn = document.querySelector('[data-start]')\nconst days = document.querySelector('[data-days]')\nconst hours = document.querySelector('[data-hours]')\nconst minutes = document.querySelector('[data-minutes]')\nconst seconds = document.querySelector('[data-seconds]')\nlet userSelectedDate = null\nstartBtn.disabled = true\n\nflatpickr(inputEL, {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0].getTime()\n\n\n        if (userSelectedDate < Date.now()) {\n            alert(\"Please choose a date in the future\")\n            startBtn.disabled = true\n        } else {\n            startBtn.disabled = false\n        }\n\n        startBtn.addEventListener('click', () => {\n            setInterval(() => {\n                const curDate = Date.now()\n                const delta = userSelectedDate - curDate\n                console.log(convertMs(delta))\n                days.textContent = addLeadingZero((convertMs(delta).days).toString())               \n                hours.textContent = addLeadingZero((convertMs(delta).hours).toString())\n                minutes.textContent = addLeadingZero((convertMs(delta).minutes).toString())\n                seconds.textContent = addLeadingZero((convertMs(delta).seconds).toString())\n            }, 1000)\n        })\n        function addLeadingZero(value) {\n            return value.padStart(2, '0')\n        }\n    },\n});\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\n"],"names":["inputEL","startBtn","days","hours","minutes","seconds","userSelectedDate","flatpickr","selectedDates","curDate","delta","convertMs","addLeadingZero","value","ms"],"mappings":"ivBAEA,MAAMA,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAO,SAAS,cAAc,aAAa,EAC3CC,EAAQ,SAAS,cAAc,cAAc,EAC7CC,EAAU,SAAS,cAAc,gBAAgB,EACjDC,EAAU,SAAS,cAAc,gBAAgB,EACvD,IAAIC,EAAmB,KACvBL,EAAS,SAAW,GAEpBM,EAAUP,EAAS,CACf,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQQ,EAAe,CACnBF,EAAmBE,EAAc,CAAC,EAAE,QAAS,EAGzCF,EAAmB,KAAK,OACxB,MAAM,oCAAoC,EAC1CL,EAAS,SAAW,IAEpBA,EAAS,SAAW,GAGxBA,EAAS,iBAAiB,QAAS,IAAM,CACrC,YAAY,IAAM,CACd,MAAMQ,EAAU,KAAK,IAAK,EACpBC,EAAQJ,EAAmBG,EACjC,QAAQ,IAAIE,EAAUD,CAAK,CAAC,EAC5BR,EAAK,YAAcU,EAAgBD,EAAUD,CAAK,EAAE,KAAM,UAAU,EACpEP,EAAM,YAAcS,EAAgBD,EAAUD,CAAK,EAAE,MAAO,UAAU,EACtEN,EAAQ,YAAcQ,EAAgBD,EAAUD,CAAK,EAAE,QAAS,UAAU,EAC1EL,EAAQ,YAAcO,EAAgBD,EAAUD,CAAK,EAAE,QAAS,UAAU,CAC7E,EAAE,GAAI,CACnB,CAAS,EACD,SAASE,EAAeC,EAAO,CAC3B,OAAOA,EAAM,SAAS,EAAG,GAAG,CAC/B,CACJ,CACL,CAAC,EAED,SAASF,EAAUG,EAAI,CAKnB,MAAMZ,EAAO,KAAK,MAAMY,EAAK,KAAG,EAC1BX,EAAQ,KAAK,MAAOW,EAAK,MAAO,IAAI,EACpCV,EAAU,KAAK,MAAQU,EAAK,MAAO,KAAQ,GAAM,EACjDT,EAAU,KAAK,MAASS,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAZ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C"}